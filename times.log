numPy:
Training inputs: [[0 0 1]
 [1 1 1]
 [1 0 1]
 [0 1 1]]
Training outputs: [[0]
 [1]
 [1]
 [0]]
Random starting synaptic weights: [[-0.20422507]
 [-0.94156737]
 [-0.28977052]]
Synaptic weights after training: [[10.38033708]
 [-0.20690868]
 [-4.9841891 ]]
Outputs after training [[0.00679896]
 [0.99445453]
 [0.99548634]
 [0.00553523]]
Output for novel input: [ 1,0,0 ] =>  [0.99996896]
real 0.27
user 0.26
sys 0.00

GHC:
Training inputs:
[[0.0,0.0,1.0],[1.0,1.0,1.0],[1.0,0.0,1.0],[0.0,1.0,1.0]]

Training outputs:
[[0.0],[1.0],[1.0],[0.0]]

Random starting synaptic weights:
[[0.30514455],[0.42772686],[0.7210243]]

Weights after training: [[10.380261],[-0.20669813],[-4.9842844]]

Output  after training: [[6.798317e-3],[0.9944548],[0.9954855],[5.5358605e-3]]

New Input and Output with trained weights:[[1.0,0.0,0.0]]=>[[0.999969]]
real 0.21
user 0.18
sys 0.02

Racket:

Training inputs:
#<array #(4 3) #[0 0 1 1 1 1 1 0 1 0 1 1]>

Training outputs:
#<array #(4 1) #[0 1 1 0]>

Random starting synaptic weights:
#<array #(3 1) #[-0.8598535747382658 0.8532402602662275 -0.7753879943119135]>

Synaptic weights after training:
#<array #(3 1) #[10.380190589843478 -0.2063760798597186 -4.984433475753267]>

Outputs after training:
#<array #(4 1) #[0.006797308963852791 0.9944553162667653 0.995484581447949 0.005536812341144865]>

Output for novel input: [1 0 0 ] => 
#<array #(1 1) #[0.9999689596203181]>
real 10.21
user 10.03
sys 0.18

Octave:
training_inputs =

   0   0   1
   1   1   1
   1   0   1
   0   1   1

training_outputs =

   0
   1
   1
   0

synaptic_weights =

   0.48984
  -0.78183
   0.19861

--
After training...
synaptic_weights =

   10.38045
   -0.20696
   -4.98422

output =

   0.0067988
   0.9944547
   0.9954867
   0.0055348

Output for novel input: [1 0 0 ] =>  0.99997
real 0.54
user 0.52
sys 0.02

Julia:
Training inputs
4Ã—3 Array{Int64,2}:
 0  0  1
 1  1  1
 1  0  1
 0  1  1
Training Outputs
4-element Array{Int64,1}:
 0
 1
 1
 0
Initial random weights
3-element Array{Float64,1}:
 -0.8515846094605122 
  0.37571004930528495
 -0.21551549995010522
--

Weights after training: 
3-element Array{Float64,1}:
 14.815718503797571  
 -0.37576573526626345
 -9.506342760838344  

Outputs after training
4-element Array{Float64,1}:
 7.437676106382834e-5
 0.9928508343230519  
 0.9950791967152294  
 5.108041070361827e-5

Outputs for novel(untrained) case
[0.9999996321971851]
real 1.58
user 1.52
sys 0.04

Node.js:
training inputs: [ [ 0, 0, 1 ], [ 1, 1, 1 ], [ 1, 0, 1 ], [ 0, 1, 1 ] ]
training outputs [ [ 0 ], [ 1 ], [ 1 ], [ 0 ] ]
[
  [ 0.009183063696758698 ],
  [ -0.15077181004051465 ],
  [ -0.4946309854063944 ]
]
Percetpron out:  [
  [ 0.006797815337435086 ],
  [ 0.994455205273557 ],
  [ 0.9954857727099385 ],
  [ 0.005535655185619729 ]
]

Final weights:  [
  [ 10.380380629547899 ],
  [ -0.20666124771243216 ],
  [ -4.9843584760753386 ]
]
Output from novel input [1 0 0 ] =>
 [ [ 0.9999689655184792 ] ]
real 0.69
user 0.97
sys 0.06

