numPy:
Training inputs: [[0 0 1]
 [1 1 1]
 [1 0 1]
 [0 1 1]]
Training outputs: [[0]
 [1]
 [1]
 [0]]
Random starting synaptic weights: [[-0.57645245]
 [ 0.39816361]
 [ 0.4972568 ]]
Synaptic weights after training: [[10.38014873]
 [-0.20667815]
 [-4.98423236]]
Outputs after training [[0.00679867]
 [0.99445453]
 [0.9954853 ]
 [0.00553626]]
Output for novel input: [ 1,0,0 ] =>  [0.99996896]
real 0.29
user 0.28
sys 0.01

GHC:
Training inputs:
[[0.0,0.0,1.0],[1.0,1.0,1.0],[1.0,0.0,1.0],[0.0,1.0,1.0]]

Training outputs:
[[0.0],[1.0],[1.0],[0.0]]

Random starting synaptic weights:
[[0.10453057],[-0.88926363],[-0.22796953]]

Weights after training: [[10.380381],[-0.20691545],[-4.9842143]]

Output  after training: [[6.7987903e-3],[0.99445456],[0.99548644],[5.5350517e-3]]

New Input and Output with trained weights:[[1.0,0.0,0.0]]=>[[0.999969]]
real 0.21
user 0.19
sys 0.02

Racket:

Training inputs:
#<array #(4 3) #[0 0 1 1 1 1 1 0 1 0 1 1]>

Training outputs:
#<array #(4 1) #[0 1 1 0]>

Random starting synaptic weights:
#<array #(3 1) #[-0.011833893242629512 -0.3494138612128056 -0.9078057186732975]>

Synaptic weights after training:
#<array #(3 1) #[10.380364006343397 -0.20665113528069787 -4.984356189782631]>

Outputs after training:
#<array #(4 1) #[0.0067978307744297455 0.9944551819783148 0.9954857082783695 0.00553572344455511]>

Output for novel input: [1 0 0 ] => 
#<array #(1 1) #[0.9999689650025984]>
real 10.41
user 10.27
sys 0.14

Typed Racket:

Training inputs:
#<array #(4 3) #[0.0 0.0 1.0 1.0 1.0 1.0 1.0 0.0 1.0 0.0 1.0 1.0]>

Training outputs:
#<array #(4 1) #[0 1 1 0]>

Random starting synaptic weights:
#<array #(3 1) #[0.955352570562003 0.9309982414468274 0.1371568437965176]>

Synaptic weights after training:
#<array #(3 1) #[0.955352570562003 0.9309982414468274 0.1371568437965176]>

Outputs after training:
#<array #(4 1) #[0.006796423953951826 0.9944560880817113 0.9954854232529344 0.005535830092716092]>

Output for novel input: [1 0 0 ] => 
#<array #(1 1) #[0.9999689679229218]>
real 2.41
user 2.03
sys 0.38

Octave:
training_inputs =

   0   0   1
   1   1   1
   1   0   1
   0   1   1

training_outputs =

   0
   1
   1
   0

synaptic_weights =

  -0.23449
  -0.86274
  -0.20323

--
After training...
synaptic_weights =

   10.38032
   -0.20690
   -4.98419

output =

   0.0067990
   0.9944545
   0.9954863
   0.0055353

Output for novel input: [1 0 0 ] =>  0.99997
real 0.54
user 0.52
sys 0.02

Julia:
Training inputs
4Ã—3 Array{Int64,2}:
 0  0  1
 1  1  1
 1  0  1
 0  1  1
Training Outputs
4-element Array{Int64,1}:
 0
 1
 1
 0
Initial random weights
3-element Array{Float64,1}:
 -0.3738799473853076 
 -0.747323143902229  
  0.48460958757323214
--

Weights after training: 
3-element Array{Float64,1}:
 14.815747608732002 
 -0.3759989612131446
 -9.506204356068936 

Outputs after training
4-element Array{Float64,1}:
 7.438705561851282e-5
 0.9928503678272831  
 0.995080016913783   
 5.107556743783797e-5

Outputs for novel(untrained) case
[0.9999996322078899]
real 1.56
user 1.51
sys 0.04

Node.js:
training inputs: [ [ 0, 0, 1 ], [ 1, 1, 1 ], [ 1, 0, 1 ], [ 0, 1, 1 ] ]
training outputs [ [ 0 ], [ 1 ], [ 1 ], [ 0 ] ]
[
  [ -0.6599691350007075 ],
  [ 0.4570756422062372 ],
  [ -0.9960604264263245 ]
]
Percetpron out:  [
  [ 0.006797186251868259 ],
  [ 0.9944554712776231 ],
  [ 0.995484941036851 ],
  [ 0.005536426571270001 ]
]

Final weights:  [
  [ 10.380288761828956 ],
  [ -0.20642796457483856 ],
  [ -4.984451651534889 ]
]
Output from novel input [1 0 0 ] =>  [ [ 0.9999689626673697 ] ]
real 0.71
user 0.99
sys 0.07

CSC Chicken:

training-inputs: #(#(0 0 1) #(1 1 1) #(1 0 1) #(0 1 1))
training-outputs: #(#(0) #(1) #(1) #(0))
synaptic-weights: #(#(0.734223610423159) #(0.287646347384537) #(0.857402537562821))

Output:#(#(0.00778174192506385) #(0.99995811485298) #(0.999965246234531) #(0.00646533981817332))

Weights after training: #(#(15.1153507689821) #(-0.186650484385636) #(-4.84816289035308))

Output for novel input: [1 0 0 ] => #(#(0.99999972742473))
real 0.41
user 0.41
sys 0.00

CSI Chicken:

training-inputs: #(#(0 0 1) #(1 1 1) #(1 0 1) #(0 1 1))
training-outputs: #(#(0) #(1) #(1) #(0))
synaptic-weights: #(#(0.734223610423159) #(0.287646347384537) #(0.857402537562821))

Output:#(#(0.00778174192506385) #(0.99995811485298) #(0.999965246234531) #(0.00646533981817332))

Weights after training: #(#(15.1153507689821) #(-0.186650484385636) #(-4.84816289035308))

Output for novel input: [1 0 0 ] => #(#(0.99999972742473))
real 0.81
user 0.79
sys 0.01

