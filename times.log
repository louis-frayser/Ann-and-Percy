numPy:
Training inputs: [[0 0 1]
 [1 1 1]
 [1 0 1]
 [0 1 1]]
Training outputs: [[0]
 [1]
 [1]
 [0]]
Random starting synaptic weights: [[-0.25028219]
 [-0.7991164 ]
 [-0.42632441]]
Synaptic weights after training: [[10.38032882]
 [-0.20684888]
 [-4.98422064]]
Outputs after training [[0.00679875]
 [0.99445464]
 [0.99548616]
 [0.00553538]]
Output for novel input: [ 1,0,0 ] =>  [0.99996896]
real 0.27
user 0.27
sys 0.00

GHC:
Training inputs:
[[0.0,0.0,1.0],[1.0,1.0,1.0],[1.0,0.0,1.0],[0.0,1.0,1.0]]

Training outputs:
[[0.0],[1.0],[1.0],[0.0]]

Random starting synaptic weights:
[[0.8469136],[-0.9852145],[0.5267973]]

Weights after training: [[10.38053],[-0.20713659],[-4.9841566]]

Output  after training: [[6.79918e-3],[0.99445456],[0.9954874],[5.5341516e-3]]

New Input and Output with trained weights:[[1.0,0.0,0.0]]=>[[0.999969]]
real 0.21
user 0.19
sys 0.02

Racket:

Training inputs:
#<array #(4 3) #[0 0 1 1 1 1 1 0 1 0 1 1]>

Training outputs:
#<array #(4 1) #[0 1 1 0]>

Random starting synaptic weights:
#<array #(3 1) #[-0.8355452580827786 -0.2950186611534751 -0.4359367067634209]>

Synaptic weights after training:
#<array #(3 1) #[10.3801397806652 -0.20671082105043329 -4.9842083919115385]>

Outputs after training:
#<array #(4 1) #[0.0067988287723909 0.9944544313498599 0.9954853647878636 0.005536208554521268]>

Output for novel input: [1 0 0 ] => 
#<array #(1 1) #[0.9999689580431907]>
real 9.99
user 9.82
sys 0.16

Typed Racket:

Training inputs:
#<array #(4 3) #[0.0 0.0 1.0 1.0 1.0 1.0 1.0 0.0 1.0 0.0 1.0 1.0]>

Training outputs:
#<array #(4 1) #[0 1 1 0]>

Random starting synaptic weights:
#<array #(3 1) #[-0.26107041265411435 -0.6318663985999792 -0.10839663365541474]>

Synaptic weights after training:
#<array #(3 1) #[-0.26107041265411435 -0.6318663985999792 -0.10839663365541474]>

Outputs after training:
#<array #(4 1) #[0.0067988236928344225 0.9944545752428163 0.9954860751853994 0.005535477793548241]>

Output for novel input: [1 0 0 ] => 
#<array #(1 1) #[0.9999689613941923]>
real 2.35
user 2.04
sys 0.30

Octave:
training_inputs =

   0   0   1
   1   1   1
   1   0   1
   0   1   1

training_outputs =

   0
   1
   1
   0

synaptic_weights =

   0.82077
  -0.99604
  -0.24427

--
After training...
synaptic_weights =

   10.38062
   -0.20700
   -4.98427

output =

   0.0067984
   0.9944551
   0.9954872
   0.0055342

Output for novel input: [1 0 0 ] =>  0.99997
real 0.54
user 0.53
sys 0.00

Julia:
Training inputs
4Ã—3 Array{Int64,2}:
 0  0  1
 1  1  1
 1  0  1
 0  1  1
Training Outputs
4-element Array{Int64,1}:
 0
 1
 1
 0
Initial random weights
3-element Array{Float64,1}:
 -0.8069639241516704 
  0.6082346044939926 
  0.16380272674304175
--

Weights after training: 
3-element Array{Float64,1}:
 14.815655687159715 
 -0.3757658423721778
 -9.506300906194907 

Outputs after training
4-element Array{Float64,1}:
 7.437987406613966e-5 
 0.9928506847643488   
 0.9950790940667393   
 5.1082543227315984e-5

Outputs for novel(untrained) case
[0.9999996321740804]
real 1.52
user 1.46
sys 0.04

Node.js:
training inputs: [ [ 0, 0, 1 ], [ 1, 1, 1 ], [ 1, 0, 1 ], [ 0, 1, 1 ] ]
training outputs [ [ 0 ], [ 1 ], [ 1 ], [ 0 ] ]
[
  [ -0.9166077154990336 ],
  [ 0.14618302453842547 ],
  [ -0.49447022382400174 ]
]
Percetpron out:  [
  [ 0.006798220744987623 ],
  [ 0.9944548070179217 ],
  [ 0.995485160941448 ],
  [ 0.005536337555695744 ]
]

Final weights:  [
  [ 10.38018446964087 ],
  [ -0.20659734840664495 ],
  [ -4.984298434835373 ]
]
Output from novel input [1 0 0 ] =>  [ [ 0.9999689594303501 ] ]
real 0.70
user 1.00
sys 0.05

CSC Chicken:

training-inputs: #(#(0 0 1) #(1 1 1) #(1 0 1) #(0 1 1))
training-outputs: #(#(0) #(1) #(1) #(0))
synaptic-weights: #(#(0.734223610423159) #(0.287646347384537) #(0.857402537562821))

Output:#(#(0.00778174192506385) #(0.99995811485298) #(0.999965246234531) #(0.00646533981817332))

Weights after training: #(#(15.1153507689821) #(-0.186650484385636) #(-4.84816289035308))

Output for novel input: [1 0 0 ] => #(#(0.99999972742473))
real 0.40
user 0.39
sys 0.00

CSI Chicken:

training-inputs: #(#(0 0 1) #(1 1 1) #(1 0 1) #(0 1 1))
training-outputs: #(#(0) #(1) #(1) #(0))
synaptic-weights: #(#(0.734223610423159) #(0.287646347384537) #(0.857402537562821))

Output:#(#(0.00778174192506385) #(0.99995811485298) #(0.999965246234531) #(0.00646533981817332))

Weights after training: #(#(15.1153507689821) #(-0.186650484385636) #(-4.84816289035308))

Output for novel input: [1 0 0 ] => #(#(0.99999972742473))
real 0.79
user 0.79
sys 0.00

