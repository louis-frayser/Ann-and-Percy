numPy:
Training inputs: [[0 0 1]
 [1 1 1]
 [1 0 1]
 [0 1 1]]
Training outputs: [[0]
 [1]
 [1]
 [0]]
Random starting synaptic weights: [[-0.40051561]
 [-0.04315663]
 [ 0.15113262]]
Synaptic weights after training: [[10.38023361]
 [-0.20673153]
 [-4.98424299]]
Outputs after training [[0.0067986 ]
 [0.99445464]
 [0.99548563]
 [0.0055359 ]]
Output for novel input: [ 1,0,0 ] =>  [0.99996896]
real 0.50
user 0.26
sys 0.01

GHC:
Training inputs:
[[0.0,0.0,1.0],[1.0,1.0,1.0],[1.0,0.0,1.0],[0.0,1.0,1.0]]

Training outputs:
[[0.0],[1.0],[1.0],[0.0]]

Random starting synaptic weights:
[[0.5615356],[-0.25913465],[-9.736896e-3]]

Weights after training: [[10.380436],[-0.20677939],[-4.984325]]

Output  after training: [[6.7980406e-3],[0.99445504],[0.9954862],[5.5351886e-3]]

New Input and Output with trained weights:[[1.0,0.0,0.0]]=>[[0.999969]]
real 0.21
user 0.18
sys 0.02

Racket:

Training inputs:
#<array #(4 3) #[0 0 1 1 1 1 1 0 1 0 1 1]>

Training outputs:
#<array #(4 1) #[0 1 1 0]>

Random starting synaptic weights:
#<array #(3 1) #[0.6647976646846894 0.9259847781166515 -0.7575690498515876]>

Synaptic weights after training:
#<array #(3 1) #[10.3805482034854 -0.20626138658338086 -4.984680829409245]>

Outputs after training:
#<array #(4 1) #[0.006795639173201605 0.994456556569929 0.995485077068298 0.005536081902945618]>

Output for novel input: [1 0 0 ] => 
#<array #(1 1) #[0.9999689707184524]>
real 9.87
user 9.70
sys 0.15

Typed Racket:

Training inputs:
#<array #(4 3) #[0.0 0.0 1.0 1.0 1.0 1.0 1.0 0.0 1.0 0.0 1.0 1.0]>

Training outputs:
#<array #(4 1) #[0 1 1 0]>

Random starting synaptic weights:
#<array #(3 1) #[0.843137479241145 -0.603328565483061 -0.43632984970617306]>

Synaptic weights after training:
#<array #(3 1) #[0.843137479241145 -0.603328565483061 -0.43632984970617306]>

Outputs after training:
#<array #(4 1) #[0.0067977421697739265 0.9944554401862947 0.9954867079584945 0.005534684337017433]>

Output for novel input: [1 0 0 ] => 
#<array #(1 1) #[0.9999689707352577]>
real 2.35
user 2.03
sys 0.32

Octave:
training_inputs =

   0   0   1
   1   1   1
   1   0   1
   0   1   1

training_outputs =

   0
   1
   1
   0

synaptic_weights =

  -0.79712
  -0.33602
  -0.60697

--
After training...
synaptic_weights =

   10.38021
   -0.20670
   -4.98425

output =

   0.0067986
   0.9944546
   0.9954855
   0.0055361

Output for novel input: [1 0 0 ] =>  0.99997
real 1.15
user 0.53
sys 0.02

Julia:
Training inputs
4Ã—3 Array{Int64,2}:
 0  0  1
 1  1  1
 1  0  1
 0  1  1
Training Outputs
4-element Array{Int64,1}:
 0
 1
 1
 0
Initial random weights
3-element Array{Float64,1}:
 -0.5519490328830017 
  0.44446190613669856
  0.15233227569603036
--

Weights after training: 
3-element Array{Float64,1}:
 14.815711002726502 
 -0.3757843243901247
 -9.506325197491282 

Outputs after training
4-element Array{Float64,1}:
 7.437806734794704e-5
 0.9928507737957436  
 0.9950792459882258  
 5.108035830694052e-5

Outputs for novel(untrained) case
[0.9999996321944263]
real 1.64
user 1.47
sys 0.05

Node.js:
training inputs: [ [ 0, 0, 1 ], [ 1, 1, 1 ], [ 1, 0, 1 ], [ 0, 1, 1 ] ]
training outputs [ [ 0 ], [ 1 ], [ 1 ], [ 0 ] ]
[
  [ -0.5891782097160445 ],
  [ -0.9112323761628753 ],
  [ 0.5627790765574123 ]
]
Percetpron out:  [
  [ 0.006799811091335076 ],
  [ 0.9944539337927907 ],
  [ 0.9954862472669116 ],
  [ 0.005535431598058478 ]
]

Final weights:  [
  [ 10.380190692382822 ],
  [ -0.20699740123299187 ],
  [ -4.984062936882308 ]
]
Output from novel input [1 0 0 ] =>  [ [ 0.999968959623501 ] ]
real 1.06
user 1.02
sys 0.04

CSC Chicken:

training-inputs: #(#(0 0 1) #(1 1 1) #(1 0 1) #(0 1 1))
training-outputs: #(#(0) #(1) #(1) #(0))
synaptic-weights: #(#(0.734223610423159) #(0.287646347384537) #(0.857402537562821))

Output:#(#(0.00778174192506385) #(0.99995811485298) #(0.999965246234531) #(0.00646533981817332))

Weights after training: #(#(15.1153507689821) #(-0.186650484385636) #(-4.84816289035308))

Output for novel input: [1 0 0 ] => #(#(0.99999972742473))
real 0.64
user 0.41
sys 0.00

CSI Chicken:

training-inputs: #(#(0 0 1) #(1 1 1) #(1 0 1) #(0 1 1))
training-outputs: #(#(0) #(1) #(1) #(0))
synaptic-weights: #(#(0.734223610423159) #(0.287646347384537) #(0.857402537562821))

Output:#(#(0.00778174192506385) #(0.99995811485298) #(0.999965246234531) #(0.00646533981817332))

Weights after training: #(#(15.1153507689821) #(-0.186650484385636) #(-4.84816289035308))

Output for novel input: [1 0 0 ] => #(#(0.99999972742473))
real 1.02
user 0.78
sys 0.00

